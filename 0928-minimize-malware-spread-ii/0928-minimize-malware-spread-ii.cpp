
#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,fma")
#pragma GCC optimize("unroll-loops")
#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <complex>
#include <queue>
#include <set>
#include <unordered_set>
#include <list>
#include <chrono>
#include <random>
#include <iostream>
#include <algorithm>
#include <cmath>
#include <string>
#include <vector>
#include <map>
#include <unordered_map>
#include <stack>
#include <iomanip>
#include <fstream>

using namespace std;
using namespace __gnu_pbds;
typedef long long ll;
// use less_equal to make it multiset
typedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> pbds;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> p32;
typedef pair<ll, ll> p64;
typedef pair<double, double> pdd;
typedef vector<ll> v64;
typedef vector<int> v32;
typedef vector<vector<int>> vv32;
typedef vector<vector<ll>> vv64;
typedef vector<vector<p64>> vvp64;
typedef vector<p64> vp64;
typedef vector<p32> vp32;
typedef vector<pair<p64, ll>> vpp64;
typedef set<ll> s64;
typedef set<p64> sp64;
typedef multiset<ll> ms64;
typedef multiset<p64> msp64;
typedef map<ll, ll> m64;
typedef map<ll, v64> mv64;
typedef unordered_map<ll, v64> uv64;
typedef unordered_map<ll, ll> u64;
typedef unordered_map<p64, ll> up64;
typedef unordered_map<ll, vp64> uvp64;
typedef priority_queue<ll> pq64;
typedef priority_queue<ll, v64, greater<ll>> pqs64;
const int MOD = 1000000007;
double eps = 1e-12;
#define forn(i, n) for (ll i = 0; i < n; i++)
#define forsn(i, s, e) for (ll i = s; i < e; i++)
#define rforn(i, s) for (ll i = s; i >= 0; i--)
#define rforsn(i, s, e) for (ll i = s; i >= e; i--)
struct custom_hash
{
    static uint64_t splitmix64(uint64_t x)
    {
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(p64 x) const
    {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x.first + FIXED_RANDOM) ^ splitmix64(x.second + FIXED_RANDOM);
    }
    size_t operator()(ll x) const
    {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
typedef gp_hash_table<ll, ll, custom_hash> fm64;
typedef gp_hash_table<p64, ll, custom_hash> fmp64;

#define ln "\n"
#define mp make_pair
#define ie insert
#define pb push_back
#define fi first
#define se second
#define INF 2e18
#define fast_cin()                    \
    ios_base::sync_with_stdio(false); \
    cin.tie(NULL);                    \
    cout.tie(NULL)
#define all(x) (x).begin(), (x).end()
#define al(arr, n) arr, arr + n
#define sz(x) ((ll)(x).size())
#define dbg(a) cout << a << endl;
#define dbg2(a) cout << a << ' ';

struct DSU
{
    v64 e, sz;
    DSU(ll n)
    {
        e.assign(n + 1, -1);
        sz.assign(n + 1, 1);
    }
    bool same(ll a, ll b) { return find(a) == find(b); }
    ll size(ll x) { return sz[find(x)]; }
    ll find(ll x) { return e[x] < 0 ? x : e[x] = find(e[x]); }
    void join(ll a, ll b)
    {
        a = find(a);
        b = find(b);
        if (a != b)
        {
            if (sz[a] < sz[b])
            {
                swap(a, b);
            }
            e[b] = a;
            sz[a] += sz[b];
        }
    }
};

v64 path;
void dfs(int v,u64 &vis,uv64 &adj,ll x)
{
    vis[v]=1;
    path.pb(v);
    for(auto child:adj[v])
    {
        if(vis[child]==0&&child!=x)
        {
            dfs(child,vis,adj,x);
        }
    }
}


class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        ll n=graph.size();
        DSU d(n);
        u64 hai;
        uv64 adj;
        forn(i,n)
        {
            forn(j,n)
            {
                if(graph[i][j])
                {
                    d.join(i,j);   
                    adj[i].pb(j);
                    adj[j].pb(i);
                }   
            }
        }
        uvp64 v;
        forn(i,initial.size())
        {
            hai[initial[i]]++;
            v[d.find(initial[i])].pb({initial[i],i});
            // cout<<d.find(initial[i])<<" ";
        }
        // cout<<endl;
        vp64 ans;
        for(auto &t:v)
        {
            auto &x=t.second;
            // we need to compute the change caused by each index
            // here we will find the change first we will find the entire cc
            ll par=t.first;
            v64 res;
            for(int i=0;i<n;i++)
            {
                if(d.find(i)==par)
                {
                    res.pb(i);
                }
            }
            // cout<<"ABHI JO GROUP MILA HAI VO HAI"<<endl;
            // for(auto x:res)
            // {
            //     cout<<x<<" ";
            // }
            // cout<<endl;
            // then we will do a dfs and find ki max change kitna ka ho rha h
            // ab jinpr query krna hai usko use krenge
            for(auto f:t.second)
            {
                // ab x ko hm include ni krenge and we will find the connected components we can reach
                // jb tk ye sb hmlog krenge till that time we can find out the cc we can reach 
                auto x=f.first;
                auto index=f.second;
                // cout<<"ABHI X hai "<<x<<endl;
                u64 vis;
                ll kitna_bacha=0;
                for(int i=0;i<res.size();i++)
                {
                        if(res[i]==x)
                        {
                            continue;
                        }
                        if(vis[res[i]]==0)
                        {
                            dfs(res[i],vis,adj,x);
                        }
                        bool check=false;
                        // cout<<"EK PATH MILA "<<endl;
                        for(auto y:path)
                        {
                            // cout<<y<<" ";
                            if(hai[y])
                            {
                                check=true;
                            }
                        }
                        // cout<<endl;
                        if(check==false)
                        {
                            // mtlb ye sala bch rha hai
                            // cout<<"ITNA BACHA"<<endl;
                            // cout<<path.size()<<endl;
                            kitna_bacha+=path.size();
                        }
                        else{
                            // cout<<"SB HKGM MAI MIL GYA"<<endl;
                        }
                        path.clear();
                    }
                    // ab merko pta hai ki ek node x ko out krenge to kitna ka change ayega
                    // ab merko to bs yhi na bta na hai na ki kitna max hm bcha lenge aur vo bhi smallest index wla first mai
                    ans.pb({kitna_bacha+1,-initial[index]});
                }
        }
        sort(all(ans));
//         cout<<"PRINTING"<<endl;
//         for(auto t:ans)
//             cout<<t.first<<" "<<t.second<<endl;
        
        return -ans.back().second;
    }
};